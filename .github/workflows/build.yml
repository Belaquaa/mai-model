name: Distance Calculator CI/CD

# –ó–∞–ø—É—Å–∫ workflow –ø—Ä–∏ push –∏ pull request –≤ main –≤–µ—Ç–∫—É
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: '*'

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –±—ç–∫–µ–Ω–¥–∞
  backend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±–æ—Ä–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test Flask app startup
      run: |
        # –¢–µ—Å—Ç —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        python -c "
        import app
        print('Flask app imports successfully')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ endpoints –¥–æ—Å—Ç—É–ø–Ω—ã
        with app.app.test_client() as client:
            response = client.get('/health')
            assert response.status_code == 200
            print('Health endpoint works')
            
            response = client.get('/')
            assert response.status_code == 200
            print('Root endpoint works')
        "
    
    - name: Test file upload (mock)
      run: |
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        python -c "
        import app
        import tempfile
        import os
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as f:
            f.write(b'fake image data for testing')
            test_file = f.name
        
        try:
            with app.app.test_client() as client:
                with open(test_file, 'rb') as f:
                    data = {'file': (f, 'test.jpg')}
                    response = client.post('/upload', 
                                         content_type='multipart/form-data',
                                         data=data)
                    print(f'Upload response status: {response.status_code}')
                    print('Upload endpoint accessible')
        finally:
            os.unlink(test_file)
        "

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  frontend-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Validate HTML
      run: |
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º html5validator –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTML
        pip install html5validator
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —Ñ–∞–π–ª –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        html5validator --root . --match "*.html" --log INFO || true
        echo "HTML validation completed"
    
    - name: Check for common issues
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ HTML –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        echo "Checking HTML for common issues..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å DOCTYPE
        if ! grep -q "<!DOCTYPE html>" *.html; then
          echo "Warning: No DOCTYPE found in HTML files"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –º–µ—Ç–∞—Ç–µ–≥–∏
        if ! grep -q "charset=" *.html; then
          echo "Warning: No charset meta tag found"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å viewport –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        if ! grep -q "viewport" *.html; then
          echo "Warning: No viewport meta tag found"
        fi
        
        echo "Frontend check completed"

  # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests
    
    - name: Start Flask server in background
      run: |
        python app.py &
        echo $! > flask.pid
        
        # –ñ–¥–µ–º –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
        sleep 5
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç
        curl -f http://localhost:5000/health || exit 1
        echo "Flask server started successfully"
    
    - name: Test API endpoints
      run: |
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints
        echo "Testing API endpoints..."
        
        # Health check
        curl -f http://localhost:5000/health
        echo "‚úì Health endpoint works"
        
        # Root endpoint
        curl -f http://localhost:5000/
        echo "‚úì Root endpoint works"
        
        # App page
        curl -f http://localhost:5000/app
        echo "‚úì App endpoint works"
        
        echo "All API tests passed!"
    
    - name: Cleanup
      run: |
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
        if [ -f flask.pid ]; then
          kill $(cat flask.pid) || true
          rm flask.pid
        fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Check for known vulnerabilities in dependencies
      run: |
        pip install -r requirements.txt
        safety check --json || true
        echo "Safety check completed"
    
    - name: Run bandit security linter
      run: |
        bandit -r . -f json || true
        echo "Bandit security check completed"

  # –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-check]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.9-slim
        
        WORKDIR /app
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        COPY requirements.txt .
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        RUN pip install --no-cache-dir -r requirements.txt
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        COPY . .
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        RUN mkdir -p uploads processed
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
        EXPOSE 5000
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        CMD ["python", "app.py"]
        EOF
    
    - name: Build Docker image
      run: |
        docker build -t distance-calculator:latest .
        echo "Docker image built successfully"
    
    - name: Test Docker container
      run: |
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ —Ñ–æ–Ω–µ
        docker run -d --name test-container -p 5000:5000 distance-calculator:latest
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        sleep 10
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
        curl -f http://localhost:5000/health || exit 1
        echo "Docker container test passed"
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        docker stop test-container
        docker rm test-container

  # –î–µ–ø–ª–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏)
  deploy:
    runs-on: ubuntu-latest
    needs: [integration-test, security-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy notification
      run: |
        echo "üöÄ Ready for deployment!"
        echo "All tests passed, security checks completed"
        echo "Project is ready for production deployment"
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π:
        # - Heroku
        # - AWS
        # - Digital Ocean
        # - –°–≤–æ–µ–π —Å–µ—Ä–≤–µ—Ä
        
        echo "Deployment step completed"

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
  notify:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-check, integration-test, security-check]
    if: always()
    
    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.backend-test.result }}" == "success" ] && \
           [ "${{ needs.frontend-check.result }}" == "success" ] && \
           [ "${{ needs.integration-test.result }}" == "success" ] && \
           [ "${{ needs.security-check.result }}" == "success" ]; then
          echo "‚úÖ All checks passed! Build successful."
        else
          echo "‚ùå Some checks failed. Please review the logs."
          exit 1
        fi